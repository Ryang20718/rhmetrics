<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px;
        }
        .chart-container {
            width: 100%;
            height: 300px;
            margin-bottom: 20px;
        }
        .number-display {
            text-align: center;
            font-size: 24px;
            margin-top: 20px;
        }
    </style>
    <link href="https://unpkg.com/tabulator-tables@5.5.4/dist/css/tabulator.min.css" rel="stylesheet">
</head>
<body>
    <div class="dashboard">
        <div class="chart-container">
            <canvas id="timeSeriesChart" width="400" height="300"></canvas>
        </div>
        <div class="chart-container">
            <canvas id="YearEarningsByTag" width="400" height="300"></canvas>
        </div>
        <div>
        <label for="yearFilter">Filter by year:</label>
        <select id="yearFilter">
            <option value="all">All</option>
            <!-- Options will be added dynamically -->
        </select>
        </div>
        <div class="chart-container">
            <canvas id="EarningsByTicker" width="400" height="300"></canvas>
        </div>
        <div class="cur-year-profit">
            <p>Current Year Profit: <span id="CurYearProfit">0</span></p>
        </div>
        <div class="total-profit">
            <p>Total Profit: <span id="TotalProfit">0</span></p>
        </div>
        <input id="ticker-filter" type="text" placeholder="AMZN,TSLA,FB,GOOG">
        <div id="TransactionTable"></div>

    </div>

    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.5.4/dist/js/tabulator.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Time Series Chart
            var timeSeriesCtx = document.getElementById('timeSeriesChart').getContext('2d');
            var timeSeriesChart = new Chart(timeSeriesCtx, {
                type: 'line',
                data: {
                    labels: {{.LabelsTimeSeries}},
                    datasets: [{
                        label: 'Realized Earnings By Year',
                        data: {{.DataTimeSeries}},
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 2,
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                }
            });


            var years = {{.LabelsYearsTag}}
            var tags = {{.LabelsTags}}
            var amounts = {{.DataAmount}}

            var groupedData = {};
            for (var i = 0; i < years.length; i++) {
                var year = years[i];
                var tag = tags[i];
                var amount = parseFloat(amounts[i]);

                if (!groupedData[tag]) {
                    groupedData[tag] = {};
                }
                if (!groupedData[tag][year]) {
                    groupedData[tag][year] = 0;
                }
                groupedData[tag][year] += amount; // Sum up the amounts for each tag within each year
            }

            // Convert grouped data into the format expected by Chart.js
            var uniqueYears = [...new Set(years)]; // Get unique years
            var earningByTagData = Object.keys(groupedData).map(tag => {
                var data = uniqueYears.map(year => groupedData[tag][year] || 0); // Map amounts to the corresponding year, default to 0 if not present
                return {
                    label: tag,
                    data: data,
                    backgroundColor: getRandomColor(),
                    borderWidth: 1,
                    stack: 'Stack 1'
                };
            });

            // Chart configuration
            var barChartCtx = document.getElementById('YearEarningsByTag').getContext('2d');
            var barChart = new Chart(barChartCtx, {
                type: 'bar',
                data: {
                    labels: Array.from(new Set(years)).map(String), // Unique years
                    datasets: earningByTagData
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        },
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Earnings by Type of Transaction and Year'
                        }
                    }
                }
            });


            var earningsLabelsByTicker = {{.DataLabelsByTicker}};
            var earningValsByTicker = {{.DataValByTicker}};
            var earningValsByYear = {{.DataValByTickerYear}};

            var earningsByTickerCtx = document.getElementById('EarningsByTicker').getContext('2d');
            var earningsByTickerChart = new Chart(earningsByTickerCtx, {
                type: 'bar',
                data: {
                    labels: earningsLabelsByTicker,
                    datasets: [{
                        data: earningValsByTicker,
                        backgroundColor: generateRandomColors(earningValsByTicker.length),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            function generateRandomColors(count) {
                var colors = [];
                for (var i = 0; i < count; i++) {
                    colors.push(getRandomColor());
                }
                return colors;
            }


            // Function to generate random color
            function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }

            var profitByYear = {{.DataTimeSeries}}
            var sumOfProfitByYear = profitByYear.reduce(function(accumulator, currentValue) {
                return accumulator + parseFloat(currentValue);
            }, 0);

            var currentYearProfit = profitByYear[profitByYear.length - 1];
            var curYearProfit = document.getElementById('CurYearProfit');
            curYearProfit.innerText = currentYearProfit;

            var totalProfit = document.getElementById('TotalProfit');
            totalProfit.innerText = sumOfProfitByYear;

            var uniqueYears = Array.from(new Set(years));

            // Get the dropdown menu element
            var yearFilter = document.getElementById('yearFilter');

            // Add an option for each unique year to the dropdown menu
            for (var i = 0; i < uniqueYears.length; i++) {
                var option = document.createElement('option');
                option.value = uniqueYears[i];
                option.text = uniqueYears[i];
                yearFilter.appendChild(option);
            }

            yearFilter.addEventListener('change', function() {
                // Get the selected year
                var selectedYear = this.value;

                // If "All" is selected, display data from all years
                if (selectedYear == 'all') {
                    earningsByTickerChart.data.labels = earningsLabelsByTicker;
                    earningsByTickerChart.data.datasets[0].data = earningValsByTicker;
                } else {
                    // Filter the data to only include the selected year
                    var filteredLabels = [];
                    var filteredData = [];
                    for (var i = 0; i < earningValsByYear.length; i++) {
                        if (earningValsByYear[i] == selectedYear) {
                            filteredLabels.push(earningsLabelsByTicker[i]);
                            filteredData.push(earningValsByTicker[i]);
                        }
                    }

                    // Update the chart with the filtered data
                    earningsByTickerChart.data.labels = filteredLabels;
                    earningsByTickerChart.data.datasets[0].data = filteredData;
                }

                earningsByTickerChart.update();
            });

            var unrealizedProfitTransactionsDf = {{.UnrealizedProfitTransactions}}
            var unrealizedProfitTransactions = unrealizedProfitTransactionsDf.slice(1).map(function(item) {
                return {
                    "Year": item[0],
                    "Date": item[1],
                    "Qty": item[2],
                    "Price": item[3],
                    "Ticker": item[4],
                    "TransactionType": item[5]
                };
            });

            var table = new Tabulator("#TransactionTable", {
                data:unrealizedProfitTransactions, //assign data to table
                columns:[ //Define Table Columns
                    {title:"Ticker", field:"Ticker"},
                    {title:"Year", field:"Year"},
                    {title:"Quantity", field:"Qty"},
                    {title:"Date", field:"Date"},
                    {title:"Price", field:"Price"},
                    {title:"TransactionType", field:"TransactionType"}
                ],
            });
            var inputField = document.getElementById("ticker-filter");

            // Update filter when input changes
            inputField.addEventListener("change", function() {
                // Split input into array
                var tickers = inputField.value.split(",");

                // Remove whitespace from each ticker
                tickers = tickers.map(function(ticker) {
                    return ticker.trim();
                });

                // Set filter
                table.setFilter("Ticker", "in", tickers);
            });
        });
    </script>
</body>
</html>
